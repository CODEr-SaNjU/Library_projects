# Generated by Django 3.2.3 on 2021-05-17 20:08

import backend.managers
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BookAdd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Book_Name', models.CharField(max_length=50, verbose_name='Books Name')),
            ],
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Book_Author', models.CharField(max_length=200, verbose_name='Book Authors Name ')),
                ('Book_Name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.bookadd', verbose_name='Books Name')),
            ],
        ),
        migrations.CreateModel(
            name='BookCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Book_Category', models.CharField(max_length=150, verbose_name='Book Category ')),
            ],
        ),
        migrations.CreateModel(
            name='BookCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Book_Ifsc', models.CharField(max_length=150, verbose_name='Book Ifsc Number')),
            ],
        ),
        migrations.CreateModel(
            name='BookPublication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Book_Publication', models.CharField(max_length=250, verbose_name='Book Publication')),
            ],
        ),
        migrations.CreateModel(
            name='Bookinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Issued_Date', models.DateField(verbose_name='Issued Date')),
                ('Availability_Status', models.IntegerField(choices=[(0, 'Yes'), (1, 'No')], default=1, verbose_name='Availability Status')),
                ('Book_Author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.bookauthor', verbose_name='Book Author Name ')),
                ('Book_Category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.bookcategory', verbose_name='Book Category Type')),
                ('Book_Ifsc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.bookcode', verbose_name='Book Ifsc Number')),
                ('Book_Name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.bookadd', verbose_name='Book Name')),
                ('Book_Publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.bookpublication', verbose_name='Book Publication')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('Email', models.EmailField(error_messages={'unique': 'A user with that Email address already exists'}, max_length=255, unique=True, verbose_name='Email Address')),
                ('Mob_Number', models.CharField(blank=True, error_messages={'unique': 'A user with that Phone Number address already exists'}, max_length=20, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid international mobile phone number starting with +(country code)', regex='^(?:[0-9]‚óè?){6,14}[0-9]$')], verbose_name='Phone Number ')),
                ('Full_Name', models.CharField(max_length=300, verbose_name='Full Name')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ProfilePhoto', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'Users Profile',
                'ordering': ['Email'],
            },
            managers=[
                ('objects', backend.managers.UserManager()),
            ],
        ),
    ]
